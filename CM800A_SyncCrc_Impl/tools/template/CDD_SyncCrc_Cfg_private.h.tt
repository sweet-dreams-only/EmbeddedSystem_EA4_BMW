<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/4.0.3'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="true" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #>/**********************************************************************************************************************
* Copyright 2017 Nxtr
* Nxtr Confidential
*
* Module File Name:   CDD_SyncCrc_Cfg_private.h
* Module Description: Private configuration header file for CM800A Synchronous CRC component.
* Project           : CBD
* Author            : Kevin Smith
***********************************************************************************************************************
* Version Control:
* %version:          3 %
* %derived_by:       cz7lt6 %
*---------------------------------------------------------------------------------------------------------------------
* Date      Rev     Author  Change Description                                                              SCR #
* --------  ------- ------- ---------------------------------------------------------------------------     ----------
* 10/07/15  1       KJS     Initial version of the private header template                                  EA4#1844
* 01/12/16  2       KJS     Updates for FDD Rev1 and support for CRC reservation                            EA4#5405
* 05/07/17  3       KJS     Updates to support all RH850 hardware variants                                  EA4#11817
**********************************************************************************************************************/

/******************************************* Multiple Include Protection *********************************************/
#ifndef CDD_SYNCCRC_CFG_PRIVATE_H
#define CDD_SYNCCRC_CFG_PRIVATE_H
<# /*-------------------------------------------------------------------------------------------------------------*/ #>
<#
    ChangeContext( Xp.ModuleConfAtDefRefTo( "SyncCrc" ) );

    /* Variables used in this template */
    List<DataCRCRegClass> DeviceRegisterList = new List<DataCRCRegClass>();
    string DeviceType = ValueOf( Xp.ValueAtDefRefTo( "DeviceType" ) );
    int idx = 0;
    long BaseAddr = 0xFFD50000;
    long Offset = 0x1000;
    long BaseSecAddr = 0;
    int subIdx = 0;
    
    /* Number of available hardware units are based on the device type. Values were according to documentation published 
     * on the date of this CR */
    int NumOfCRCUnits = 0;
    switch(DeviceType)
    {
        case "P1H-C":
        case "P1H-CE":
            NumOfCRCUnits = 8;
        break;
        case "P1L-C":
            NumOfCRCUnits = 2;
        break;
        case "P1x":
        case "P1M-C":
        case "P1M-E":
        default:
            NumOfCRCUnits = 4;
        break;
    }

    /* Create a list of device channels and their register base addresses */
    switch(DeviceType)
    {
        /* DCRA Types */
        case "P1x":
        case "P1M-E":
            for (idx = 0; idx < NumOfCRCUnits; idx++)
            {
                /* Add to list */
                DeviceRegisterList.Add( new DataCRCRegClass("DATACRCREGCH" + idx.ToString(), (BaseAddr + (idx * Offset))) );
            }
        break;
        /* DCRB Types */
        case "P1M-C":
        case "P1H-C":
        case "P1H-CE":
        case "P1L-C":
            for (idx = 0; idx < NumOfCRCUnits; idx++)
            {
                if((idx % 2) > 0)
                {
                    /* Odd indexes */
                    BaseAddr = 0xFFD70000;
                }
                else
                {
                    /* Even Indexes */
                    BaseAddr = 0xFFD50000;
                }
                /* Add to list */
                DeviceRegisterList.Add( new DataCRCRegClass("DATACRCREGCH" + idx.ToString(), (BaseAddr + (subIdx * Offset))) );
                
                if((idx % 2) > 0)
                { 
                    subIdx++; /* Increment the sub index on each odd value */
                }
            }
        break;
        default:
#>
#error "Invalid device selection."
<#
        break;
    }
#>
<# /*-------------------------------------------------------------------------------------------------------------*/ #>

/************************************************ Include Statements *************************************************/
#include "Std_Types.h"

/******************************************** File Level Rule Deviations *********************************************/

/* MISRA-C:2004 Rule 1.1 [NXTRDEV 1.1.3]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 3.4 [NXTRDEV 3.4.1]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 6.4 [NXTRDEV 6.4.1]: Deviation is allowed for creating access to device register memory. */
/* MISRA-C:2004 Rule 8.9 [NXTRDEV 8.9.1]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 18.4 [NXTRDEV 18.4.2]: Union statement required to provide access to the entire register or its sub sections with the same variable reference. */
/* MISRA-C:2004 Rule 19.1 [NXTRDEV 19.1.1]: AUTOSAR requires deviation from this rule for Memory Mapping include statements. */
/* MISRA-C:2004 Rule 19.3 [NXTRDEV 19.3.1]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 19.4 [NXTRDEV 19.4.1]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 19.4 [NXTRDEV 19.4.2]: Data type abstraction to support the generated code between difference OS versions. */
/* MISRA-C:2004 Rule 19.7 [NXTRDEV 19.7.2]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 19.10 [NXTRDEV 19.10.1]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */
/* MISRA-C:2004 Rule 19.13 [NXTRDEV 19.13.1]: Register access to support differences between RH850 family hardware uses code following pattern of Renesas header files. */


/**************************************************** Type defs ******************************************************/
/* The control register structure is the same for DCRA and DCRB units */
typedef struct
{
    /* Bit Access */
    uint8 POL:2;    /* CRC Polynomial type selection */
    uint8 :2;       /* Reserved Bits */
    uint8 ISZ:2;    /* ISZ - Input bit width */
    uint8 :2;       /* Reserved Bits */
} DataCrcCtrlRegBitAcsRec1;

typedef union
{
    /* Byte Access */
    uint8                       Byte_u08;
    DataCrcCtrlRegBitAcsRec1    Bit_b08;
} DataCrcCtrlRegRec1;

/*
 Register offset from the base address for both DCRA and DCRB types is as follows: 
    Input Register:     Size 32bits | Offset = 00h
    Output Register:    Size 32bits | Offset = 04h
    Control Register:   Size  8bits | Offset = 20h
*/
typedef struct
{
    uint32              Inp_u32;        /* Input register -- Writes to this register automatically change output */
    uint32              Outp_u32;       /* Output register -- Result of the CRC calculation */
    uint32              Dummy_u32[6];   /* Reserved */
    DataCrcCtrlRegRec1  Ctrl_rec;       /* Control register */
} DataCrcRegRec1;

typedef struct 
{
    volatile DataCrcRegRec1* Reg_rec;
} DataCrcRec1;

/************************************************ Embedded Constants *************************************************/

/* Macros for placing symbols at the register addresses */
#ifndef NXTR_PRAGMA_IO_TYPEDEF
#define NXTR_PRAGMA_IO_TYPEDEF
#define NXTRREGPRAGMA(x)        _Pragma(#x)
#define NXTR_PRAGMA_READREG     volatile const
#define NXTR_PRAGMA_WRREG       volatile
#define NXTR_PRAGMA_READWRREG   volatile
#define NXTR_PRAGMA_IOREG(reg, addr, attrib, type) NXTRREGPRAGMA(ghs io reg addr) \
extern attrib type reg
#endif

<# /*-------------------------------------------------------------------------------------------------------------*/ #>
<#
    if ( ValueOf( Xp.ValueAtDefRefTo( "ReservedCRCHardwareUnits" ) ) <= NumOfCRCUnits )
    {
#>
#define NROFCRCHWUNIT_CNT_U08       <#= NumOfCRCUnits #>U
#define NROFACTVCRCHWUNIT_CNT_U08   <#= NumOfCRCUnits - ValueOf( Xp.ValueAtDefRefTo( "ReservedCRCHardwareUnits" ) ) #>U
#define ARWRPRENAD_CNT_U08          <#= ValueOf( Xp.ValueAtDefRefTo( "AutosarWrapperEnable" ) ) #>
#define MAXNROFCRCHWUNIT_CNT_U08    8U
#define CRCOSREF_CNT_U08            (<#= LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "CrcOsApplicationReference" )) #>)
<#
    }
    else
    {
#>
#error "Configuration error with SyncCrc/SyncCrcCommon/ReservedCRCHardwareUnits: Value is greater than <#= NumOfCRCUnits #>."
<#
    }
#>
<# /*-------------------------------------------------------------------------------------------------------------*/ #>

/****************************************************** Macros *******************************************************/
/* Pragma statements for the CRC registers. These macros assign a pragma and extern statement for the variable to 
   the address in the arguments. Argument are Variable Name, Address, Read/Write Access, Data Type. */
<# /*-------------------------------------------------------------------------------------------------------------*/ #>
<#    
    string DataCRCRegStr = "";
    string delim = ", ";
    foreach (DataCRCRegClass entry in DeviceRegisterList)
    {
        if ( entry.Name == DeviceRegisterList[DeviceRegisterList.Count - 1].Name )
        {
           delim = "";
        }
        DataCRCRegStr += "{&" + entry.Name + "}" + delim;
#>
NXTR_PRAGMA_IOREG(<#= entry.Name #>, <#= FormatHex(entry.BaseAddr, 8, HexCase.Upper) #>, NXTR_PRAGMA_READWRREG, DataCrcRegRec1);
<#
    }

    string ResvIdDftValStr = "";
    long IdVal = 0;
    delim = ", ";
    for (idx = 0; idx < NumOfCRCUnits; idx++)
    {
        if (idx == (NumOfCRCUnits - 1))
        {
            delim = "";
        }
        IdVal = 0xFFFFFFFF - idx;
        ResvIdDftValStr += FormatHex(IdVal, 4, HexCase.Upper).ToString() + "UL" + delim;
    }
#>
<# /*-------------------------------------------------------------------------------------------------------------*/ #>

/* Default values for static constants */
#define CRCRESVIDDFTVAL_CNT_U32     {<#= ResvIdDftValStr #>}
#define CRCREGDFTVAL_REC            {<#= DataCRCRegStr #>}

<#
	ChangeContext( Xp.ModuleConfAtDefRefTo( "Os" ) );
	try
	{
		/* Try to read the OsKernelVersion which is defined in the latest OS and not in older versions.  If the read
		 * is successful the the program is using the newest OS and nothing needs to be done. */
		ValueOf( Xp.ValueAtDefRefTo( "OsPublishedInformation/OsKernelVersion" ));
	}
	catch
	{
		/* If the read fails, the program is using the older OS and a patch needs to be made to adapt the non-trusted
		 * function name and types to those used by the older operating system. */
#>
/* Provide patch for use with older version of the Vector OS without prefixed names on functions and types. */
#define Os_NonTrustedFunctionIndexType         NonTrustedFunctionIndexType
#define Os_NonTrustedFunctionParameterRefType  NonTrustedFunctionParameterRefType
#define Os_CallNonTrustedFunction              CallNonTrustedFunction
<#
    }
#>


/*********************************************** Exported Declarations ***********************************************/

/**************************************** End Of Multiple Include Protection *****************************************/
#endif /* CDD_SYNCCRC_CFG_PRIVATE_H */
<#+
    public class DataCRCRegClass
    {
        public DataCRCRegClass(string name, long baseaddr)
        {
            this.Name = name;
            this.BaseAddr = baseaddr;
        }
        public string Name;
        public long BaseAddr;
    }
#>