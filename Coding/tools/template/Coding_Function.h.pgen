%{+ Coding_Functions }%
%{#
GetGeneralConfig()
GetAreasConfig(True)
}%
/**
 * \file
 *
 * \brief       Coding Function
 *
 * \project     BMW Platform Software
 *
 * \copyright   BMW AG 2016 - 2017
 *
 * \version     5.2.1
 *
 */

/*------------------------------------------------------------------------------
*
*  THIS FILE WAS GENERATED. DO NOT MODIFY!
*
*  GENERATOR       : %{= generation_tool() }% %{= generation_version_info() }%
*
*  GENERATION TIME : %{= generation_timestamp() }%
*
------------------------------------------------------------------------------*/

#ifndef CODING_FUNCTION_H
#define CODING_FUNCTION_H

/*------------------------------------------------------------------------------
                      Include Section
-------------------------------------------------------------------------------*/

#include "BUtil/PlatformTypes.h"     /* BMW Platform Types          */
#include "Coding.h"                  /* Coding_ReturnType */


/*------------------------------------------------------------------------------
                      Macros
-------------------------------------------------------------------------------*/

/* check version of the module */
#if (!Coding_CHECK_VERSION(5, 2, 1))
   #error "Version of Coding_Function.h does not match the version of the module!"
#endif


/*------------------------------------------------------------------------------
                      Global Function Declarations
-------------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C" {
#endif

#define Coding_START_SEC_CODE
#include "Coding_MemMap.h" /* PRQA S 5087 */

%{@ area_context in codingConfig.coding_areas_list }%
%{@   function_context in area_context.coding_functions_list }%
%{:     if function_context.function_appl_type=="bytearray" }%
extern Coding_ReturnType Coding_Get%{= function_context.function_name }%(uint8 funcVal[]);

%{:     else }%
extern Coding_ReturnType Coding_Get%{= function_context.function_name }%(%{= function_context.type }% *funcVal);

%{:}%
%{@}%
%{@}%

%{: if generalConfig.data_check }%
%{@   area_context in codingConfig.coding_areas_list }%
%{@     function_context in area_context.coding_functions_list }%
%{:       if function_context.function_data_check }%
extern %{= function_context.checktype }% Coding_Check%{= function_context.function_name }%(void);
%{:}%
%{@}%
%{@}%
%{:}%

#define Coding_STOP_SEC_CODE
#include "Coding_MemMap.h" /* PRQA S 5087 */

#ifdef __cplusplus
}
#endif

#endif /* CODING_FUNCTION_H */
