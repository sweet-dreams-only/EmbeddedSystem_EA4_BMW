%{+ Coding_Functions }%
%{#
GetGeneralConfig()
GetAreasConfig(True)
}%
/**
 * \file
 *
 * \brief       Coding - This file is the configuration implementation file for
 *              the Coding module.
 *
 * \project     BMW Platform Software
 *
 * \copyright   BMW AG 2016 - 2017
 *
 * \version     5.2.1
 *
 */

/*------------------------------------------------------------------------------
*
*  THIS FILE WAS GENERATED. DO NOT MODIFY!
*
*  GENERATOR       : %{= generation_tool() }% %{= generation_version_info() }%
*
*  GENERATION TIME : %{= generation_timestamp() }%
*
------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
                      MISRA-Deviations
------------------------------------------------------------------------------*/
/*
 * Violation of MISRA-C:2004 Rule 19.1:
 * Reason: Including Coding_MemMap.h is necessary throughout
 * the file according to memory abstraction. See PRQA 5087.
 */

/*------------------------------------------------------------------------------
                      Include Section
-------------------------------------------------------------------------------*/
#include "Coding_Cfg.h"              /* Own header file */
#include "BUtil/PlatformTypes.h"     /* BMW Platform Types          */
#include "Coding_Data.h"

/*------------------------------------------------------------------------------
                      Macros
-------------------------------------------------------------------------------*/

/* check version of the module */
#if (!Coding_CHECK_VERSION(5,2,1))
   #error "Version of Coding_Cfg.c does not match the version of the module!"
#endif

/*------------------------------------------------------------------------------
                      Global Constants
-------------------------------------------------------------------------------*/

#define Coding_START_SEC_CONST_SAVED_RECOVERY_ZONE_UNSPECIFIED
#include "Coding_MemMap.h" /* PRQA S 5087 */

/**
 * \brief Coding default data.
 *
 * \lhref COD_091, COD_097
 *
 */
const Coding_DataType Coding_CodingDataDefault =
{
%{@ area_context in codingConfig.coding_areas_list }%
/*------------------------------------------------------------------------------
*  AreaName: %{= area_context.area_name }%
-------------------------------------------------------------------------------*/
/* Coding data size: %{= area_context.area_size - (generalConfig.signature_size+codingConfig.caf_id_size) }% */
%{@ i in range(0,area_context.area_size-(generalConfig.signature_size+codingConfig.caf_id_size)) }%
%{= area_context.area_memory_data_list[i]}%u,%{@}%

/* CAF-ID size: %{= codingConfig.caf_id_size }% */
/** \lhref COD_108, COD_109 */
0x05u,%{= '0xFFu,'*(codingConfig.caf_id_size-1) }%
/* Signature size: %{= generalConfig.signature_size }% */
/** \lhref COD_147, COD_148 */
%{= '0x{0:02X}u,'.format(area_context.area_def_val)*generalConfig.signature_size }%
%{@}%
/*------------------------------------------------------------------------------
*  Coding proof stamp size: %{= codingConfig.cps_size }%
-------------------------------------------------------------------------------*/
/** \lhref COD_093, COD_105, COD_106 */
%{= '0xFFu,'*codingConfig.cps_size }%
/*------------------------------------------------------------------------------
*  Programming id information size: %{= codingConfig.prog_id_size }%
-------------------------------------------------------------------------------*/
%{= '0xFFu,'*(codingConfig.prog_id_size-1) }%0xFFu
};

#define Coding_STOP_SEC_CONST_SAVED_RECOVERY_ZONE_UNSPECIFIED
#include "Coding_MemMap.h" /* PRQA S 5087 */

#define Coding_START_SEC_CONST_16
#include "Coding_MemMap.h" /* PRQA S 5087 */

/**
 * \brief Stores the index to the start byte of the coding area in the Coding_CodingDataDefault array
 */
const uint16 Coding_AreaOffsetTable[CODING_NUMBER_OF_AREAS] = {
%{= ",\n".join(map(
  lambda area_context: '{0.area_offset:5}u /* AreaName: {0.area_name} */'.format(area_context),
  codingConfig.coding_areas_list)) }%
};

/**
 * \brief Stores the size of each area
 */
const uint16 Coding_AreaSizeTable[CODING_NUMBER_OF_AREAS] = {
%{= ",\n".join(map(
  lambda area_context: '{0.area_size:5}u /* AreaName: {0.area_name} */'.format(area_context),
  codingConfig.coding_areas_list)) }%
};

/**
 * \brief Stores the index to the start byte of the Caf id block in the Coding_CodingDataDefault array.
 */
const uint16 Coding_CafIdOffsetTable[CODING_NUMBER_OF_AREAS] = {
%{= ",\n".join(map(
  lambda area_context: '{offset_caf_id:5}u /* AreaName: {0.area_name} */'.format(area_context,
  offset_caf_id=area_context.area_size+area_context.area_offset-codingConfig.signature_size-codingConfig.caf_id_size),
  codingConfig.coding_areas_list)) }%
};

#define Coding_STOP_SEC_CONST_16
#include "Coding_MemMap.h" /* PRQA S 5087 */
