<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/schema/r4.0'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="false" #>
<#@ output extension="" #>
<#
   bool enableSecureVin = Exists(Xp.ContainerAtDefRefTo("Vin/SecureVin"));
   if (enableSecureVin) {

#>
/*----------------------------------------------------------------------------*/
/**
*  \file
*
*  \brief       BMW SWC Vin
*
*  This file contains the postbuild configuration of Vin.
*
*  \project     BMW AUTOSAR Core
*
*  \par         To be changed by user:
*               [yes/no]
*
*  \copyright   BMW AG 2015 - 2017
*
*  \version     3.5.0
*
*  \remarks     The content of this file only serves as an example. If this
*               file is platform dependent, this shall be mentioned here.
*
*/
/*----------------------------------------------------------------------------*/

#ifndef VIN_PBCFG_H_
#define VIN_PBCFG_H_

/*------------------------------------------------------------------------------
                      Include Section
------------------------------------------------------------------------------*/

#include "Vin_Cfg.h"


/*------------------------------------------------------------------------------
                      MISRA-Deviations
------------------------------------------------------------------------------*/

/* Violation of MISRA rule 19.1, Reason: Including Vin_MemMap.h is necessary throughout
   the file according to memory abstraction, see PRQA: 5087 */


/*------------------------------------------------------------------------------
                      Macros
------------------------------------------------------------------------------*/

/* check version of the module */
#if (!Vin_CHECK_VERSION(3,5,0))
   #error "Version of Vin_PBCfg.h does not match the version of the module!"
#endif

<#
   ChangeContext(null);
   ChangeContext(Xp.ModuleConfAtDefRefTo("Vin"));
   int numberOfMultiConfigs = Count(Xp.ContainerAtDefRefTo("MultiConfig"));

   if (numberOfMultiConfigs > 1) {
#>
#define VIN_MULTIPLE_CONFIG_SETS_EXIST STD_ON
<#
   } else {
#>
#define VIN_MULTIPLE_CONFIG_SETS_EXIST STD_OFF
<#
   }
#>

/*------------------------------------------------------------------------------
                      Data Types
------------------------------------------------------------------------------*/

typedef struct {
   uint8 SsvId;
} Vin_PBConfigType;


/*------------------------------------------------------------------------------
                      Global Constants
------------------------------------------------------------------------------*/

#define Vin_START_SEC_CONST_UNSPECIFIED
#include "Vin_MemMap.h"  /* PRQA S 5087 */
<# !LOOP(Xp.ContainerAtDefRefTo("MultiConfig")) #>

extern CONST(Vin_PBConfigType, Vin_CONST) <#=ValueOf("ar:SHORT-NAME") #>;

<# !ENDLOOP #>
#define Vin_STOP_SEC_CONST_UNSPECIFIED
#include "Vin_MemMap.h"  /* PRQA S 5087 */


/*------------------------------------------------------------------------------
                      Global Variables
-------------------------------------------------------------------------------*/

#define Vin_START_SEC_VAR_INIT_UNSPECIFIED
#include "Vin_MemMap.h"  /* PRQA S 5087 */

extern P2CONST(Vin_PBConfigType, Vin_VAR, Vin_APPL_CONST) Vin_PBConfigSetPtr;

#define Vin_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "Vin_MemMap.h"  /* PRQA S 5087 */


/*------------------------------------------------------------------------------
                      Global Function Declarations
------------------------------------------------------------------------------*/
<#   if (numberOfMultiConfigs > 1) { #>

#define Vin_START_SEC_CODE
#include "Vin_MemMap.h"  /* PRQA S 5087 */

extern FUNC(void, Vin_CODE) Vin_SetConfiguration
(
    P2CONST(Vin_PBConfigType, AUTOMATIC, Vin_APPL_CONST) selectedConfig
);

#define Vin_STOP_SEC_CODE
#include "Vin_MemMap.h"  /* PRQA S 5087 */

<#   } #>

#endif /* VIN_PBCFG_H_ */

/*--- End of file ------------------------------------------------------------*/

<# } /* if (enableSecureVin) */
   else
   {
#>
/*----------------------------------------------------------------------------*/
/* This File is not used for this configuration                               */
/*----------------------------------------------------------------------------*/

<# } /* if (enableSecureVin) */ #>